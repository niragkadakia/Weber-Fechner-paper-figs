"""
Plot estimation error in discrimination tasks in compressed sensing 
from error objects (.npz) generated by calculate_errors.py, 
averaged over 2nd variables. Distinct plots are generated 
for each background complexity. 

Created by Nirag Kadakia at 22:00 04-08-2018
This work is licensed under the 
Creative Commons Attribution-NonCommercial-ShareAlike 4.0 
International License. 
To view a copy of this license, visit 
http://creativecommons.org/licenses/by-nc-sa/4.0/.
"""


import scipy as sp
import sys
import matplotlib.pyplot as plt
sys.path.append('../../shared_src')
from save_load_figure_data import load_success_ratios, save_fig
from plot_formats import fig_errors_vs_Kk

# The location of the source code for CS-variability-adaptation is listed
# in the ../../shared_src/local_methods file within src_dir()
from local_methods import src_dir
sys.path.append(src_dir())
from utils import get_flag
from load_specs import read_specs_file


def plot_errors_vs_Kk(data_flag, plot_colorbar=False, xticks=1, 
						yticks=1, complexities_to_plot=range(1, 6)):
	"""
	Heatmap of errors as a function of background stimulus (x) and 
	odor complexity (y). 
	
	complexities_to_plot: list; actual background odor complexities to plot;
							not the indices of the array. 
	"""
	
	list_dict = read_specs_file(data_flag)
	iter_vars = list_dict['iter_vars']
	successes = load_success_ratios(data_flag)
	
	assert len(iter_vars) == 4, "Need 4 iter_vars"
	iter_var_names = ['mu_Ss0', 'seed_Kk2', 'Kk_1', 'Kk_2']
	for iName, name in enumerate(iter_var_names):
		assert iter_vars.keys()[iName] == name, "%sth variable "\
			"must have name %s" % (iName, name)
	mu_Ss0_vals = iter_vars['mu_Ss0']
	Kk_1_vals = iter_vars['Kk_1']
	Kk_2_vals = iter_vars['Kk_2']
	
	# Each plot is foreground complexity versus foreground intensity
	x = mu_Ss0_vals
	y = Kk_1_vals
	X, Y = sp.meshgrid(x, y)
		
	# Distinct plots for each background complexity
	bkgrnd_complexities = Kk_2_vals
	
	# Plot successes, averaged over various odor identities
	# Distinct plot for each background complexity
	for iKk2, Kk2 in enumerate(bkgrnd_complexities):
	
		if Kk2 not in complexities_to_plot:
			continue
	
		fig = fig_errors_vs_Kk()
		avg_successes = sp.average(successes[:, :, :, iKk2], axis=1)
		plt.pcolormesh(X, Y, avg_successes.T, cmap=plt.cm.hot, rasterized=True,
						shading='gouraud', vmin=-0.05, vmax=1.05)
		plt.xlim(10**0, 10**4)
		plt.ylim(1, 5)
		plt.xticks(fontsize=16)
		plt.yticks(range(1, 6), fontsize=16)
		plt.xscale('log')
		
		if xticks == False:
			plt.xticks([])
		if yticks == False:
			plt.yticks([])
		if plot_colorbar == True:
			cbar = plt.colorbar()
			cbar.ax.tick_params(labelsize=15) 
		save_fig('errors_vs_Kk_bkgrnd_complexity=%s' % Kk2, subdir=data_flag)
		
		
if __name__ == '__main__':
	data_flag = get_flag()
	plot_errors_vs_Kk(data_flag)